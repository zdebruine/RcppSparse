<<<<<<< HEAD
Rcpp::sourceCpp('src/example.cpp')
document()
document()
document()
Rcpp::sourceCpp('src/example.cpp')
document()
document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
document()
document()
Rcpp::sourceCpp('src/example.cpp')
rm(list = ls())
document()
Rcpp::sourceCpp('src/example.cpp')
document()
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
str(new("dgCMatrix"))
library(glmnet)
?extract.coef
?glmnet
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so.cpp')
s <- readRDS("C:/Users/Owner/Downloads/mergedAll.rds")
colnames(s)
=======
m1 <- Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-8)
m1 <- Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-8, seed = 123)
m1 <- Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123)
mb <- microbenchmark(Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123), Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123))
mb
autoplot(mb)
library(ggplot2)
autoplot(mb)
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F))
mb
autoplot(mb)
A_sparse <- hawaiibirds$counts
A_dense <- as.matrix(A_sparse)
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F))
mb
autoplot(mb)
data(movielens)
A_sparse <- movielens$ratings
A_dense <- movielens$genres
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F))
mb
A_dense <- as.matrix(movielens$ratings)
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F))
mb
autoplot(mb)
length(A_sparse@x)/prod(dim(A_sparse))
A_dense <- hawaiibirds$counts
A_sparse <- hawaiibirds$counts
A_dense <- as.matrix(A_dense)
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F), "R kmeans" = stats::kmeans(A_dense, 10, 100L))
mb
autoplot(mb)
A_dense <- aml
A_sparse <- as(aml, "dgCMatrix")
mb <- microbenchmark("sparse" = Rcpp_kmeans(A_sparse, matrix(), 10, tol = 1e-6, seed = 123, verbose = F), "dense" = Rcpp_kmeans(new("dgCMatrix"), A_dense, 10, tol = 1e-8, seed = 123, verbose = F), "R kmeans" = stats::kmeans(A_dense, 10, 100L))
mb
autoplot(mb)
?stats::kmeans
Rcpp::sourceCpp('C:/Users/Owner/Desktop/kmeans.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/kmeans.cpp')
str(A_sparse)
dim(A_sparse)
A_sparse <- hawaiibirds$counts
m <- Rcpp_kmeans(A_sparse, matrix(), 10)
timer
plot(timer)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/kmeans.cpp')
m <- Rcpp_kmeans(A_sparse, matrix(), 10)
plot(timer)
pbmc3k
A_sparse <- pbmc3k@assays$RNA@counts
m <- Rcpp_kmeans(A_sparse, matrix(), 10)
plot(timer)
summary(timer, units = "ms")
Rcpp::sourceCpp('C:/Users/Owner/Desktop/kmeans.cpp')
km <- stats::kmeans(as.matrix(hawaiibirds$counts), 10)
str(km)
head(km$centers)
head(t(km$centers))
str(km)
methods("kmeans")
?stats::kmeans
Rcpp::sourceCpp('GitHub/RcppML/src/nmf_std.cpp')
>>>>>>> 445be048eba222095fab57869e4c82bc7def4b34
library(RcppML)
library(RcppClock)
data(hawaiibirds)
A <- hawaiibirds$counts
w <- matrix(runif(nrow(A) * 10), 10, nrow(A))
m <- nmf_bench(A, w, c(0, 0))
bench
library(RcppClock)
plot(bench)
library(Seurat)
library(SeuratData)
pbmc3k
A <- pbmc3k@assays$RNA@counts
w <- matrix(runif(nrow(A) * 10), 10, nrow(A))
m <- nmf_bench(A, w, c(0, 0))
bench
plot(bench)
Rcpp::sourceCpp('GitHub/RcppML/src/nmf_bench.cpp')
Rcpp::sourceCpp('GitHub/RcppML/src/nmf_std.cpp')
m <- nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20)
m2 <- nmf_gold_standard(A, w, tol = 1e-10, maxit = 20)
bench
bench2
Rcpp::sourceCpp('GitHub/RcppML/src/nmf_std.cpp')
m <- nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20)
m2 <- nmf_gold_standard(A, w, tol = 1e-10, maxit = 20)
bench
bench2
bench_gold
plot(bench)
plot(bench_gold)
Rcpp::sourceCpp('GitHub/RcppML/src/nmf_std.cpp')
m <- nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20)
m2 <- nmf_gold_standard(A, w, tol = 1e-10, maxit = 20)
bench
bench_gold
plot(bench)
plot(bench_gold)
mb <- microbenchmark(nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20), nmf_gold_standard(A, w, tol = 1e-10, maxit = 20), times = 10)
library(microbenchmark)
mb <- microbenchmark(nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20), nmf_gold_standard(A, w, tol = 1e-10, maxit = 20), times = 10)
mb
autoplot(mb)
library(ggplot2)
autoplot(mb)
hcabm40k
A <- hcabm40k@assays$RNA@counts
w <- matrix(runif(nrow(A) * 20), 20, nrow(A))
mb <- microbenchmark(nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20), nmf_gold_standard(A, w, tol = 1e-10, maxit = 20), times = 20)
mb
autoplot(mb)
A <- hawaiibirds$counts
w <- matrix(runif(nrow(A) * 10), 10, nrow(A))
mb <- microbenchmark(nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20), nmf_gold_standard(A, w, tol = 1e-10, maxit = 20), times = 100)
mb
autoplot(mb)
mb <- microbenchmark(nmf_bench(A, w, c(0, 0), tol = 1e-10, maxit = 20), nmf_gold_standard(A, w, tol = 1e-10, maxit = 20), times = 1000)
mb
autoplot(mb)
library(NNLM)
?nnmf
library(Matrix)
A <- rsparsematrix(5, 5, 0.5, rand.x = function(n){sample(1:3, n, replace = T)})
A
A
str(A)
A@i
A@p
A@Dim
A@x
setwd("C:/Users/Owner/Documents/RcppSparse")
setwd("C:/Users/Owner/Documents/GitHub/RcppSparse")
Rcpp::sourceCpp('src/stcMatrix.cpp')
source('~/GitHub/RcppSparse/R/stcMatrix.R')
A <- as(A, "stcMatrix")
A
?sparseVector
v <- sample(1:3, 20, replace = T)
v[sample(1:20, 15)] <- 0
v
v[4] <- 1
v[v == 3] <- 2
v
as(v, "sparseVector")
str(as(v, "sparseVector"))
A
A <- as(A, "dgCMatrix")
A
A <- as.matrix(A)
A
l <- list(A[,1])
l
l[[2]] <- A[,2]
attr(l, "Dim") <- list(5, 5)
str(l)
A <- rsparsematrix(10, 10, 0.1)
A[,1]
A[,3]
A[1,]
A[1:2,4:5]
A[1,4:5]
A[1,c(2,4,5)]
A[c(1,3),c(2,4,5)]
?`dgCMatrix-class`
?`dgRMatrix-class`
dim()A)
dim(A)
library(Seurat)
library(SeuratData)
A <- pbmc3k@assays$RNA@counts
library(microbenchmark)
mb <- microbenchmark(t(A), as(A, "dgRMatrix"), times = 10)
mb
library(ggplot2)
library(Matrix)
mb <- microbenchmark(t(A), as(A, "dgRMatrix"), times = 10)
mb
mb <- microbenchmark(t(A), as(as(A, "dgTMatrix"), "dgRMatrix"), times = 10)
A_ <- as(A, "dgTMatrix")
str(A_)
A_ <- as(A_, "dgRMatrix")
mb <- microbenchmark(t(A), as(A, "stcMatrix"), times = 10)
mb
autoplot(mb)
?`lgCMatrix-class`
?`dgCMatrix-class`
A
A <- rsparsematrix(10, 10, 0.1)
A
A == 0
A != 0
A > 0
A < 1
A > 0
str(A)
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
library(Matrix)
library(Seurat)
library(SeuratData)
library(microbenchmark)
library(ggplot2)
A <- rsparsematrix(10, 10, 0.1, rand.x = function(n) sample(1:3, n, replace = T))
A_ <- as(A, "tabMatrix")
A <- pbmc3k@assays$RNA@counts
A_ <- as(A, "tabMatrix")
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 2
)
mb
autoplot(mb)
Rcpp::sourceCpp('src/tabMatrix.cpp')
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 2
)
mb
hcabm40k
A <- hcabm40k@assays$RNA@counts
rm(hcabm40k)
A_ <- as(A, "tabMatrix")
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 2
)
mb
mb1 <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 10
)
Rcpp::sourceCpp('src/tabMatrix.cpp')
mb2 <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 10
)
mb1
mb2
Rcpp::sourceCpp('src/tabMatrix.cpp')
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 10
)
mb
autoplot(mb)
A <- rsparsematrix(10, 10, 0.1, rand.x = function(n) sample(1:3, n, replace = T))
A_ <- as(A, "tabMatrix")
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 100
)
mb
autoplot(mb)
mb <- microbenchmark(
dgCMatrix_colSums(A),
colSums(A),
tabMatrix_colSums(A_),
times = 10000
)
mb
autoplot(mb)
Rcpp::sourceCpp('src/tabMatrix.cpp')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
str(A_)
print(A_)
A <- pbmc3k@assays$RNA@counts
A_ <- as(A, "tabMatrix")
print(A_)
A_ <- as(A, "tabMatrix", ncol = 20, nrow = 20)
print(A_, ncol = 20, nrow = 20)
print(A_, ncol = 20, nrow = 50)
source('~/GitHub/RcppSparse/R/tabMatrix.R')
print(A_, ncol = 20, nrow = 50)
?print.table
require(stats)
ts(1:20)  #-- print is the "Default function" --> print.ts(.) is called
for(i in 1:3) print(1:i)
## Printing of factors
attenu$station ## 117 levels -> 'max.levels' depending on width
## ordered factors: levels  "l1 < l2 < .."
esoph$agegp[1:12]
esoph$alcgp[1:12]
## Printing of sparse (contingency) tables
set.seed(521)
t1 <- round(abs(rt(200, df = 1.8)))
t2 <- round(abs(rt(200, df = 1.4)))
table(t1, t2) # simple
print(table(t1, t2), zero.print = ".") # nicer to read
## same for non-integer "table":
T <- table(t2,t1)
T <- T * (1+round(rlnorm(length(T)))/4)
print(T, zero.print = ".") # quite nicer,
print.table(T[,2:8] * 1e9, digits=3, zero.print = ".")
Matrix::Matrix(T)
print(A_)
source('~/GitHub/RcppSparse/R/tabMatrix.R')
?t
source('~/GitHub/RcppSparse/R/tabMatrix.R')
dim(A_)
str(A_)
At_ <- t(A_)
mb <- microbenchmark(as(A, "tabMatrix"), as(A_, "dgCMatrix"), t(A), t(A_), times = 3)
mb
autoplot(mb)
dim(A)
dim(A)
source('~/GitHub/RcppSparse/R/tabMatrix.R')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
dim(A)
A[,1]
str(A[,1])
?subset
?`[`
source('~/GitHub/RcppSparse/R/tabMatrix.R')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
new("tabVector")
class(A_)
dim(A_)
A_[, 1]
source('~/GitHub/RcppSparse/R/tabMatrix.R')
A_[, 1]
source('~/GitHub/RcppSparse/R/tabMatrix.R')
A_[, 1]
source('~/GitHub/RcppSparse/R/tabMatrix.R')
A_[, 1]
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
dim(A)
A_ <- as(A, "tabMatrix")
Rcpp::sourceCpp('src/tabMatrix.cpp')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
library(Matrix)
library(Seurat)
library(SeuratData)
library(microbenchmark)
library(ggplot2)
A <- rsparsematrix(10, 10, 0.1, rand.x = function(n) sample(1:3, n, replace = T))
A_ <- as(A, "tabMatrix")
A_
print(A_)
A
str(as(A, "tabMatrix"))
Rcpp::sourceCpp('src/tabMatrix.cpp')
print(as(A, "tabMatrix"))
Rcpp::sourceCpp('src/tabMatrix.cpp')
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
print(as(A, "tabMatrix"))
A <- pbmc3k@assays$RNA@counts
A_ <- as(A, "tabMatrix")
str(A_)
A_ <- as(A_, "dgCMatrix")
all.equal(A_@x, A@x)
all.equal(A_@i, A@i)
str(A_)
str(A)
all.equal(A, A_)
A_ <- as(A, "tabMatrix")
Rcpp::sourceCpp('src/tabMatrix.cpp')
A_ <- as(A, "tabMatrix")
A_ <- as(A, "tabMatrix")
A_ <- as(A, "tabMatrix")
str(A_)
Rcpp::sourceCpp('src/tabMatrix.cpp')
A_ <- as(A, "tabMatrix")
Rcpp::sourceCpp('src/tabMatrix.cpp')
source('~/GitHub/RcppSparse/R/tabMatrix.R')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
count(A[,1])
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
?`[<-`
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('src/tabMatrix.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
<<<<<<< HEAD
str(times)
t <- summary(times, units = "ms")
t
head(times)
times <- data.frame(times$ticker, times$timer)
head(times)
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
p1 + scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous()
times$timer <- times$timer / 1e6
head(times)
times$times.timer <- times$times.timer / 1e6
head(times)
A <- rsparsematrix(100000, 1000, 0.1)
bench(A, A, A)
times <- data.frame(times$ticker, times$timer)
times$times.timer <- times$times.timer / 1e6
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
p1 + scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, width = 0.15) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, width = 0.1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, height = 0.1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
library(usethis)
usethis::use_pkgdown()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
devtools::document()
rm(list = ls())
devtools::document()
?`RcppSparse-package`
devtools::document()
?`RcppSparse-package`
devtools::document()
pkgdown::build_site(new_process = FALSE)
?columnSums
library(Matrix)
A <- rsparsematrix(nrow = 10, ncol = 5, density = 0.5)
columnSums(A)
devtools::document()
?RcppSparse
?RcppSparse-package
?`RcppSparse-package`
devtools::document()
pkgdown::build_site(new_process = FALSE)
getwd()
setwd("/home/zach.debruine/Downloads")
list.files()
setwd("/home/zach.debruine/Documents/RcppSparse/src")
sourceCpp("tabMatrix.cpp")
Rcpp::sourceCpp("tabMatrix.cpp")
source("~/Documents/RcppSparse/R/tabMatrix.R")
knitr::opts_chunk$set(echo = TRUE)
library(Matrix)
setwd("/home/zach.debruine/Documents/RcppSparse/src")
Rcpp::sourceCpp("tabMatrix.cpp")
source("/home/zach.debruine/Documents/RcppSparse/R/tabMatrix.R")
setwd("/home/zach.debruine/Downloads")
A <- readRDS("gene_count_cleaned.RDS")
dim(A)
library(Matrix)
setwd("/home/zach.debruine/Documents/RcppSparse/src")
Rcpp::sourceCpp("tabMatrix.cpp")
source("/home/zach.debruine/Documents/RcppSparse/R/tabMatrix.R")
str(A)
system.time(A_tabMatrix <- as(A, "tabMatrix"))
system.time(A_dgCMatrix <- as(A_tabMatrix, "dgcMatrix"))
unlink("~/Desktop/tabMatrix_cache", recursive = TRUE)
v <- sample(1:100, 50)
v
v2 <- runif(50)
v
v2
object.size(v)
object.size(v2)
448/248
methods(class = "sparseVector")
methods(class = "isparseVector")
library(Matrix)
methods(class = "sparseVector")
methods(class = "isparseVector")
methods(class = "dsparseVector")
getwd()
Rcpp::sourceCpp("src/tabVector.cpp")
Rcpp::sourceCpp("src/tabVector.cpp")
Rcpp::sourceCpp("src/tabVector.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
source("~/Documents/tabMatrix/R/tabMatrix.R")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
Rcpp::sourceCpp("src/tabMatrix.cpp")
str(new("logicalVector"))
str(new("lsparseVector"))
v <- sample(0:1, 10, replace = T)
v
as(v, "lsparseVector")
as(v, "sparseVector")
str(v == 0)
str(v != 0)
v <- v != 0
v
v <- as(v, "lsparseVector")
new("lsparseVector", length = 10, i = v != 0, x = rep(TRUE, length(i)))
?dot
=======
m <- as.integer(sample(1:100, 1e6, replace = T))
mb <- microbenchmark(arma_test(m), arma_test2(m), rcpp_test(m), times = 100)
mb
autoplot(mb)
m <- as.integer(sample(1:100, 1e8, replace = T))
mb <- microbenchmark(arma_test(m), arma_test2(m), rcpp_test(m), times = 100)
mb
autoplot(mb)
m <- as.integer(sample(1:100, 1e7, replace = T))
mb <- microbenchmark(arma_test(m), arma_test2(m), rcpp_test(m), times = 100)
mb
autoplot(mb)
summary(mb, unit = "secs")
summary(mb, unit = "ms")
A <- pbmc3k@assays$RNA@counts
library(SeuratData)
library(Seurat)
A <- pbmc3k@assays$RNA@counts
A <- as(A, "tabMatrix")
str(A)
length(A@x)
length(A@x)/1e6
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
m <- A@x
mb <- microbenchmark(
"arma ref" = arma_test(m),
"arma copy" = arma_test2(m),
"rcpp" = rcpp_test(m),
"std" = std_test(m),
"eigen" = eigen_test(m),
times = 10)
mb
autoplot(mb)
length(A@x)
length(m)
m <- A@x
mb <- microbenchmark(
"arma ref" = arma_test(m),
"arma copy" = arma_test2(m),
"rcpp" = rcpp_test(m),
"std" = std_test(m),
"eigen" = eigen_test(m),
times = 100)
mb
autoplot(mb)
hcabm40k
A <- hcabm40k@assays$RNA@counts
A <- as(A, "tabMatrix")
m <- A@x
length(m)
m <- A@x
mb <- microbenchmark(
"arma ref" = arma_test(m),
"arma copy" = arma_test2(m),
"rcpp" = rcpp_test(m),
"std" = std_test(m),
"eigen" = eigen_test(m),
times = 10)
summary(mb, unit = "ms")
autoplot(mb)
AvailableData()
pbmcsca
str(pbmcsca)
>>>>>>> 445be048eba222095fab57869e4c82bc7def4b34
