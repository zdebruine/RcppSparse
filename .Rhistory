m <- sparse_crossprod(A, B)
m
str(m)
Rcpp::sourceCpp('src/example.cpp')
m <- sparse_crossprod(A, B)
str(m)
m2 <- t(A) %*% B
str(m2)
all.equal(m1, m2)
all.equal(m, m2)
all.equal(m@i, m2@i)
tail(m@i)
tail(m@x)
Rcpp::sourceCpp('src/example.cpp')
m <- sparse_crossprod(A, B)
str(m)
all.equal(m@i, m2@i)
all.equal(m@p, m2@p)
all.equal(m@Dim, m2@Dim)
all.equal(m@x, m2@x)
Rcpp::sourceCpp('src/example.cpp')
m <- sparse_crossprod(A, B)
str(m)
library(microbenchmark)
dim(A)
dim(B)
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
mb
autoplot(mb)
library(ggplot2)
autoplot(mb)
A <- rsparsematrix(10000, 25, 0.01)
B <- rsparsematrix(10000, 10, 0.1)
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 10)
mb
autoplot(mb)
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
autoplot(mb)
B <- rsparsematrix(10000, 10, 0.01)
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
mb
autoplot(mb)
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
mb
autoplot(mb)
Rcpp::sourceCpp('src/example.cpp')
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
mb
autoplot(mb)
Rcpp::sourceCpp('src/example.cpp')
mb <- microbenchmark("RcppSparse" = sparse_crossprod(A, B), "Matrix" = t(A) %*% B, times = 100)
mb
autoplot(mb)
dim(crossprod(A, B))
dim(t(A) %*% B)
dim(sparse_crossprod(A, B))
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
library(devtools)
document()
Rcpp::sourceCpp('src/example.cpp')
document()
Rcpp::sourceCpp('src/example.cpp')
?crossprod
Rcpp::sourceCpp('src/example.cpp')
document()
document()
document()
Rcpp::sourceCpp('src/example.cpp')
document()
document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
document()
document()
Rcpp::sourceCpp('src/example.cpp')
rm(list = ls())
document()
Rcpp::sourceCpp('src/example.cpp')
document()
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
str(new("dgCMatrix"))
library(glmnet)
?extract.coef
?glmnet
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so.cpp')
s <- readRDS("C:/Users/Owner/Downloads/mergedAll.rds")
colnames(s)
library(RcppML)
data(aml)
model <- nmf(aml, 10, tol = 1e-10, maxit = 500, seed = 1:10)
str(model)
library(glmnet)
library(coefplot)
​
x <- model$w
y <- model$h
​
fit <- glmnet(t(x), y, family = "multinomial", type.multinomial = "grouped")
plot(fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
coef_fit <- coef(fit, s = 0.1)
deviance(fit)
​
cvfit <- cv.glmnet(t(x), y, family = "multinomial", type.multinomial = "grouped")
plot(cvfit)
print(cvfit)
​
# Confusion Matrix for Classification
cnf <- confusion.glmnet(cvfit$fit.preval, newy = y, family = "multinomial")
#print(cnf)
best <- cvfit$index["min",]
print(cnf[[best]])
install.packages("coefplot")
library(glmnet)
library(coefplot)
x <- model$w
y <- model$h
dim(x)
dim(y)
fit <- glmnet(t(x), y, family = "multinomial", type.multinomial = "grouped")
plot(fit, xvar = "lambda", label = TRUE, type.coef = "2norm")
coef_fit <- coef(fit, s = 0.1)
deviance(fit)
cvfit <- cv.glmnet(t(x), y, family = "multinomial", type.multinomial = "grouped")
plot(cvfit)
print(cvfit)
cnf <- confusion.glmnet(cvfit$fit.preval, newy = y, family = "multinomial")
?extract.coef
n <- extract.coef(cvfit)
str(n)
str(cvfit)
coef_cvfit <- coef(cvfit, s = "lambda.min")
str(coef_cvfit)
coef_cvfit2 <- matrix(unlist(coef_cvfit), ncol = 6, byrow = T)
dim(coef_cvfit2)
str(coef_cvfit2)
coef_cvfit2 <- as.matrix(unlist(coef_cvfit), ncol = 6, byrow = T)
str(coef_cvfit2)
str(coef_cvfit)
head(coef_cvfit)
head(str(coef_cvfit))
coef_cvfit2 <- lapply(coef_cvfit, function(x) as.matrix(x))
str(coef_cvfit2)
coef_cvfit2 <- do.call(cbind, coef_cvfit)
dim(coef_cvfit2)
coef_cvfit2[,1:10]
coef_cvfit2[1:10,1:10]
str(coef_cvfit2)
coef_cvfit2@i
coef_cvfit2@Dimnames[2]
coef_cvfit2@Dimnames[1]
coef_cvfit2 <- lapply(coef_cvfit, function(x) as.matrix(x))
str(coef_cvfit2)
head(coef_cvfit2[[1]])
head(coef_cvfit2[[2]])
head(coef_cvfit2[[3]])
head(coef_cvfit2[[5]])
head(coef_cvfit2[[6]])
str(coef_cvfit[[1]])
target_djDMRs <- readRDS("C:/Users/Owner/Downloads/target_djDMRs.rds")
str(target_djDMRs)
15+93+12
dim(aml)
138-15
colnames(mergedAll)
colnames(merged_all)
str(colnames(target_djDMRs$MEP))
A <- readRDS("C:/Users/Owner/Downloads/merged_all.rds")
A <- readRDS("C:/Users/Owner/Downloads/mergedAll.rds")
str(A)
colnames(A)[which(colnames(A)) %in% target_djDMRs$L-MPP@dimnames[[2]]] <- "AML LMPP"
colnames(A)[which(colnames(A) %in% target_djDMRs$L-MPP@dimnames[[2]])] <- "AML LMPP"
colnames(A)[which(colnames(A) %in% target_djDMRs["L-MPP"]@dimnames[[2]])] <- "AML LMPP"
colnames(A)[which(colnames(A) %in% target_djDMRs[["L-MPP"]]@dimnames[[2]])] <- "AML LMPP"
colnames(A)[which(colnames(A) %in% colnames(target_djDMRs[["L-MPP"]]))] <- "AML LMPP"
colnames(A)[which(colnames(A) %in% colnames(target_djDMRs[["GMP"]]))] <- "AML GMP"
colnames(A)[which(colnames(A) %in% colnames(target_djDMRs[["MEP"]]))] <- "AML MEP"
colnames(A)
A <- A[, -c(1:2)]
colnames(A)
colnames(A)[119]
A <- A[, -119]
colnames(A)
A <- A[, -120]
colnames(A)
colnames(A)[120:125] <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP)
colnames(A)[120:125] <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP"")
colnames(A)[120:125] <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
colnames(A)[120:125] <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
colnames(A)
tail(colnames(A), n = 9)
tail(colnames(A), n = 9) <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
colnames(A)[125:134] <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
colnames(A)
names <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
names <- c("LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "GMP", "MEP", "LMPP", "MEP", "GMP")
names
length(names)
colnames(A)[(length(colnames(A))-15) : length(colnames(A))] <- names
colnames(A)[(length(colnames(A))-14) : length(colnames(A))] <- names
colnames(A)
colnames(A)[119]
colnames(A)[118]
colnames(A)[119] <- "AML MEP"
colnames(A)
str(A)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
x
print_nonzeros(v)
print_foobar(v)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
m
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
m <- as(m, "ngCMatrix")
m
print_foobar(m)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/so2.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
m <- rsparsematrix(1000, 10, 0.1
)
library(Matrix)
m <- rsparsematrix(1000, 10, 0.1)
head(m)
sparse_colSums(m)
colSums(m)
n <- rsparsematrix(1000, 10, 0.1)
o <- sparse_crossprod(m, n)
p <- t(m) %*% n
all.equal(o, p)
dim(o)
str(o)
o
p
all.equal(o, as.vector(p))
plot(o, as.vector(p))
plot(o, t(as.vector(p)))
p
o
Rcpp::sourceCpp('src/example.cpp')
o <- sparse_crossprod(m, n)
plot(o, t(as.vector(p)))
plot(o, as.vector(p))
plot(o, as.vector(p))
plot(o, as.vector(t(p)))
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('~/GitHub/RcppSparse_backup.cpp')
devtools::document()
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
test(m)
dim(m)
dim(p)
class(p)
test(p)
Rcpp::sourceCpp('src/example.cpp')
test(p)
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
test(p)
test(runif(10))
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
rm(list = ls())
devtools::document()
test(runif(10))
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
?sparse_colsums
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
A <- rsparsematrix(10, 10, 0.1)
library(Matrix)
A <- rsparsematrix(10, 10, 0.1)
sparse_colsums(A)
Rcpp::sourceCpp('src/example.cpp')
sparse_colsums(A)
rm(list = ls())
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
library(Matrix)
A <- rsparsematrix(10, 10, 0.1)
sparse_colsums(A)
Rcpp::sourceCpp('src/example.cpp')
devtools::document()
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
A <- rsparsematrix(10, 10, 0.1)
library(Matrix)
A <- rsparsematrix(10, 10, 0.1)
change_value2(A)
A
A <- rsparsematrix(10, 10, 0.1)
B <- change_value1(A)
B
A
A <- rsparsematrix(3, 3, 0.5)
A2 <- change_value1(A)
A2@x[1]
change_value2(A)
A@x[1]
A@x[1]
A <- rsparsematrix(3, 3, 0.5)
A2 <- change_value1(A)
A2@x[1]
A@x[1]
change_value2(A)
A@x[1]
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
A <- rsparsematrix(100, 100, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
library(microbenchmark)
library(ggplot2)
A <- rsparsematrix(100, 100, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
mb
library(microbenchmark)A <- rsparsematrix(10000, 10000, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
mb
A <- rsparsematrix(100000, 100000, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
dim(A)
A <- rsparsematrix(10000, 10000, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
mb
autoplot(mb)
autoplot(mb, units = "ms")
summary(mb, units  = "ms")
summary(mb, units  = "s")
methods(microbenchmark)
methods(class = "microbenchmark")
?summary.microbenchmark
summary.microbenchmark(mb, unit = "ms")
summary(mb, unit = "ms")
A <- rsparsematrix(10000, 10000, 0.01)
mb <- microbenchmark(
"RcppSparse (as)" = RcppSparse_as(A),
"Armadillo (as)" = arma_as(A),
"Eigen (as)" = Eigen_as(A),
"RcppSparse (as + wrap)" = RcppSparse_as_wrap(A),
"Armadillo (as + wrap)" = arma_as_wrap(A),
"Eigen (as + wrap)" = Eigen_as_wrap(A))
autoplot(mb)
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
Rcpp::sourceCpp('src/example.cpp')
A <- rsparsematrix(10000, 10, 0.1)
bench(A, A, A)
times
A <- rsparsematrix(100000, 1000, 0.1)
bench(A, A, A)
times
autoplot(times)
plot(times)
plot(times) + scale_x_continuous(0, 28)
plot(times) + scale_x_continuous(limits = c(0, 28))
Rcpp::sourceCpp('src/example.cpp')
bench(A, A, A)
plot(times)
plot(times) + scale_x_continuous(0, 300)
plot(times) + scale_x_continuous(limits = c(0, 300))
Rcpp::sourceCpp('src/example.cpp')
microbenchmark(RcppSparse1(A), RcppSparse2(A))
Rcpp::sourceCpp('src/example.cpp')
microbenchmark(RcppSparse1(A), RcppSparse2(A))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
Rcpp::sourceCpp('C:/Users/Owner/Desktop/test.cpp')
str(times)
t <- summary(times, units = "ms")
t
head(times)
times <- data.frame(times$ticker, times$timer)
head(times)
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
p1 + scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300))
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous()
times$timer <- times$timer / 1e6
head(times)
times$times.timer <- times$times.timer / 1e6
head(times)
A <- rsparsematrix(100000, 1000, 0.1)
bench(A, A, A)
times <- data.frame(times$ticker, times$timer)
times$times.timer <- times$times.timer / 1e6
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
p1 + scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(x = times.ticker, y = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_point(size = 0.8) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, width = 0.15) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, width = 0.1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
ggplot(times, aes(y = times.ticker, x = times.timer)) + geom_violin() + geom_jitter(size = 1, height = 0.1) +
scale_x_continuous(limits = c(0, 300)) + labs(y = "", x = "milliseconds") + theme_classic()
library(usethis)
usethis::use_pkgdown()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site(new_process = FALSE)
devtools::document()
rm(list = ls())
devtools::document()
?`RcppSparse-package`
devtools::document()
?`RcppSparse-package`
devtools::document()
pkgdown::build_site(new_process = FALSE)
?columnSums
library(Matrix)
A <- rsparsematrix(nrow = 10, ncol = 5, density = 0.5)
columnSums(A)
devtools::document()
?RcppSparse
?RcppSparse-package
?`RcppSparse-package`
devtools::document()
pkgdown::build_site(new_process = FALSE)
